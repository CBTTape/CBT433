/* REXX    MAKEPARA   Create a new paragraph by copying the $EXAMPLE
                      member into member being edited, then customize
                      the template into a legitmate paragraph.  The user
                      must place the cursor on the line which contains
                      the new paragraph name, and must specify a line
                      command of A (after) or B (before) to identify the
                      location of the new paragraph.
           Use '(routine name)  ?' for HELP-text.

            The '$EXAMPLE' member has the general shape of a paragraph
            as you will see in the code below: a two-line comment, the
            paragraph name-line, a call to BRANCH, an address
            specification, and a 'return' line. There are two spots in
            this text where four x'ea' characters appear.  After the
            example text is copied in, those x'ea' blocks are changed to
            the actual name that was on the CALL.  After the pro-forma
            code is loaded and fixed, the programmer can begin filling
            in the actual code for that paragraph.

           Written by G052811 Chris Lewis 19960415

     Modification History
     19960425 ctl Fixed problem with multiple '(' within a function
                call.  Fixed problem where user could not create a
                paragraph ahead of the call.
     19960508 fxc Upper case orignal call
     19960508 ctl Handle extra '(' in call
     19960730 ctl Remove commas and semicolons from paragraph name
     20200405 fxc REXXSKEL 20020513
     20210402 fxc position cursor at 'address' ; MARK
     20230726 fxc adjust HELP;
     20230816 fxc correct HELP; change '3f' to 'ea';
     20240621 fxc chg all # to $;

*/
address ISREDIT                        /* REXXSKEL ver.960119        */
"macro (parms) NOPROCESS"              /* Used to turning trace on   */
if rc = 20 then do                     /* ISREDIT not available      */
   parse source  .  .  exec_name .
   ex_nam = Left(exec_name,8)          /* predictable size           */
   helpmsg = ex_nam "is an EDIT macro"
   call HELP                           /* and don't come back        */
   end
parse upper var parms parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */
if WordPos( "?",info ) > 0 then call HELP    /*                     -*/

address ISPEXEC
"CONTROL ERRORS RETURN"

call A_INIT                            /*                           -*/
   if helpmsg <> "" then call HELP
call B_CHECK                           /*                           -*/
   if sw.error_found then return
call C_PROCESS                         /*                           -*/

exit                                   /*@ MAKEPARA                  */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address ISREDIT

  "(data) = LINE .zcsr"                /* contents of line .zcsr     */
  "(cpos) = LINENUM" .zcsr             /* Line number of cursor      */

  "(dsn) = DATASET"                    /* dsn fully qualified w/o    */
                                       /* quotes                     */

   parse upper var data . "CALL" paraname . /* find paragraph name   */
   if paraname = "" then
      if pos("(",data) > 0 then do     /* must be a function         */
         parse var data . paraname "(" .
         parse value reverse(paraname) with paraname .
         paraname = reverse(paraname)
         end
   if paraname = "" then
      helpmsg = helpmsg,
               "Unable to find paraname on line" cpos "Line" data

   if pos("(",paraname) > 0 then
      parse var paraname paraname "(" .

   paraname = strip(paraname,,";")     /* Remove any semicolons      */
   paraname = strip(paraname,,",")     /* Remove any commas          */

  "PROCESS RANGE A B"                  /* Allow line cmds of A or B  */
   if rc > 0 then
      helpmsg = helpmsg "No line commands entered."

return                                 /*@    A_INIT                 */
/*
.  ----------------------------------------------------------------- */
B_CHECK:                               /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   stat = Sysdsn("'"dsn"("mem")'") = "OK"
   if stat then return                 /* already there              */

  "lminit  dataid(baseid) dataset("basedsn")"
  "lminit  dataid(testid) dataset('"dsn"')"
  "lmcopy fromid("baseid") frommem("mem")",
         "todataid("testid") tomem("mem")" /* copy into dataset     */
   sw.error_found = rc >  0            /*      from default          */

   if sw.error_found then do
      say "Copy Failed" rc
      say "From dsn" basedsn
      say "From mem" mem
      say "To   dsn" basedsn
      say "To   mem" mem
      end

return                                 /*@    B_CHECK                */
/*
.  ----------------------------------------------------------------- */
C_PROCESS:                             /*@                           */
   if branch then call BRANCH
   address ISREDIT

  "(cmd) = RANGE_CMD"                  /* was A or B used?           */

   cmd.A  = "AFTER"                    /* copy after or              */
   cmd.B  = "BEFORE"                   /* copy before                */

  "(first) = LINENUM" .zfrange         /* find first occurence       */

  "COPY" cmd.cmd first mem             /* copy member here           */

   findval = 'eaeaeaea'X               /* Label name in template     */

  "FIND '"findval"' 1 NX FIRST"        /* find where I put it        */
  "(procline) = CURSOR"
/*
   There are 2 label names in the template paragraph and one on the
   line where the original CALL was found.  Convert both to new name.
   We may not want to convert all.
*/
   (up_case)
  "C NX '"findval"' '"paraname"'"
  "C NX '"findval"' '"paraname"'"

   /* Set cursor to line; change original CALL.                      */
  "CURSOR =" cpos   "1"
  "C NX '"paraname"' '"paraname"'"
  "MARK"

  "CAPS OFF"
  "CURSOR  = "procline
  "FIND '...'"

return                                 /*@    C_PROCESS              */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO

   info = parms
   up_case = 'CAPS'
   xmp_mem = "$EXAMPLE"
   xmp_dsn = "'FCLARKE.FB80.SYSEXEC'"

   parse value KEYWD( "MEMBER" ) xmp_mem     with,
               mem   .

   parse value KEYWD( "FROM"   ) xmp_dsn     with,
               basedsn    .

return                                 /*@ LOCAL_PREINIT             */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
   if Symbol( "xmp_dsn" ) = "LIT" then,
      call LOCAL_PREINIT               /*                           -*/
if helpmsg <> "" then say helpmsg
say "                                                                          "
say "  MAKEPARA      (Edit macro).  Create a new paragraph by copying the      "
say "                $EXAMPLE member into member being edited.  Must specify a "
say "                line command of A (after) or B (before).                  "
say "                                                                          "
say "  Syntax:   MAKEPARA  FROM   dsn             - Alternate DSN              "
say "                      MEMBER member          - Alternate template         "
say "                                                                          "
say "            This Edit Macro will copy in a paragraph template and then    "
say "            convert the paragraph label.  Place an A (after) or B (before)"
say "            where you wish to insert the new paragraph.  Place the cursor "
say "            on the line which contains the new paragraph name (typically, "
say "            the 'call').  <dsn> is used to specify the dataset the        "
say "            template should be copied from.  If not specified it will     "
say "            default to                                                    "
say "                 "xmp_dsn"                                                "
say "                                                                          "
say "            If <dsn> is specified it should conform to TSO naming         "
say "            conventions  fully qualified if quoted.  <member> is used to  "
say "            specify an alternate template.  If not specified it will      "
say "            default to $EXAMPLE.                                          "
say "                                                                          "
say "            If the template does not exist in the dataset being edited it "
say "            will copied from <dsn>.                                       "
"NEWSTACK"; pull; "CLEAR"; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        BRANCH    show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv  will use value following TRACE to place                 "
say "                  the execution in REXX TRACE Mode.                       "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO" exec_name"  parameters  ((  debug-options                    "
say "                                                                          "
say "   For example                                                            "
say "                                                                          "
say "        TSO" exec_name " (( BRANCH  TRACE ?R                              "

address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
