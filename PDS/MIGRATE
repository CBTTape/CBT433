/* REXX    MIGRATE    a code element from one dataset to another.
                      Migrated code is assigned a modified-time value of
                      00:00:00 unless ASIS is specified.
           Use '(routine name)  ?' for HELP-text.
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|

           Written by Frank Clarke  rexxhead@yahoo.com 20210825

     Impact Analysis
.    SYSEXEC   PDSCOPYD
.    SYSEXEC   TRAPOUT

     Modification History
     20211018 fxc save dataset names in PROFILE pool
     20211028 fxc rig to accept mbrlist in parms along with fromds and
                  tods;
     20230509 fxc enable ASIS
     20230608 fxc use &ZUP/&ZCONT
     20230806 fxc chg SYSPROC to SYSEXEC in Impact Analysis;
     20230809 fxc collect zerrsm and zerrlm for all members;
     20230901 fxc avoid novalue on zerrlm; efficiency mods;
     20230908 fxc set log lrecl to 255;
     20230915 fxc alloc logdsn MOD;
     20240305 fxc align panel names;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240404 fxc changed tutorial to scrollable area;
     20240406 fxc chgd logging in I;
     20240415 fxc DUMP_QUEUE quiet;

*/ arg argline
address ISPEXEC                        /* REXXSKEL ver.20210402      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Initialization            -*/
call I_SERVICES                        /* panel work                -*/

if sw.0NoLog = 0 then,
   call ZB_SAVELOG                     /*                           -*/
if \sw.nested then call DUMP_QUEUE 'quiet' /*                       -*/
exit                                   /*@ MIGRATE                   */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   call A0_SETUP_LOG                   /*                           -*/
   logpref = "("Branch( "ID" )")"
   call ZL_LOGMSG( logpref  exec_name,
                  "started by" Userid() yyyymmdd hhmmss )
   call ZL_LOGMSG( logpref  "Arg:" argline )

   dummy     = SWITCH( "ASIS" )        /* backward compatibility     */
   sw.0asis  = 1                       /* forced                     */
   sw.0NoLog = SWITCH( "NOLOG" )
   fromds    = KEYWD( "FROM" )
   tods      = KEYWD( "TO" )
   parse value "0 0 0 0 0 0 0"    with,
               mig_ct   .
   parse value ""    with,
               mbr zerrsm  zerrlm stats.

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
A0_SETUP_LOG:                          /*@                           */
   if branch then call BRANCH
   address TSO

   msglim = SYSVAR( "SYSWTERM" ) - 12
   parse value "0 0 0 0 0" with,
                log#    log.  .
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   hhmmss = Space( Translate( hhmmss,' ',':' ) ,0 )
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Left(  hhmmss,4 )              /* X141743  ? */
   logdsn = "@LOG."exec_name"."subid".LIST"
   tempstat = Sysdsn(logdsn) = "OK"    /* 1=exists, 0=missing        */
   if tempstat = 1 then do
      logpref = "("Branch( "ID" )")"
      call ZL_LOGMSG( logpref  "------------" )
      end

return                                 /*@ A0_SETUP_LOG              */
/*
   Panel work
.  ----------------------------------------------------------------- */
I_SERVICES:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC
   i_tv = trace()                      /* what setting at entry ?    */

   call DEIMBED                        /* load panels                */
   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd "LIBRARY  ID("@ddn") STACK"
   end
   ddnlist = ddnlist dd
                                     rc = Trace("O"); rc = trace(i_tv)
   "VGET (@MIGFDS @MIGTDS) PROFILE"
   parse value  fromds  @MIGFDS   with,
                fromds  .
   parse value  tods    @MIGTDS   with,
                tods    .

   if info <> "" then do               /* process parms              */
      parse value "" with zerrsm zerrlm
      do words(info)
         parse var info mbr info
         call IT_TSO_VERBS             /* the actual migration      -*/
      end                              /* Words(info)                */

      if zerrlm <> "" then do
         if mig_ct > 0 then ,
            zerrsm = mig_ct "items migrated "
         else zerrsm = "? "
         zerrlm = Strip( zerrlm )
         zerrlm = Strip( zerrlm,,';' )
         logpref = "("Branch( "ID" )")"
         call ZL_LOGMSG( logpref  zerrlm )
         "SETMSG MSG(ISRZ002)"
         parse value "0" with mig_ct zerrsm zerrlm
         end                           /* zerrlm not empty           */

      end                              /* info                       */
   else,                               /* info was empty             */
   do forever
      "DISPLAY PANEL(FROMTO)"          /* get dsns and mbr           */
      if rc > 0 then leave             /* PF3 ?                      */

      call IT_TSO_VERBS                /* the actual migration      -*/

      logpref = "("Branch( "ID" )")"
      if zerrlm <> "" then
         "SETMSG MSG(ISRZ002)"
      do while zerrlm <> ''
         parse var zerrlm slug ';' zerrlm
         call ZL_LOGMSG( logpref  slug )
      end                              /* zerrlm                     */
      /*
      if zerrlm <> "" then do
         logpref = "("Branch( "ID" )")"
         call ZL_LOGMSG( logpref  zerrlm )
         "SETMSG MSG(ISRZ002)"
         parse value "" with zerrsm zerrlm
         end
      */
      mbr   = ""
   end                                 /* forever                    */

   @MIGFDS  = fromds
   @MIGTDS  = tods
   "VPUT (@MIGFDS @MIGTDS) PROFILE"

   rc = Trace("O")
   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd
      address TSO "FREE  FI("@ddn")"
   end

return                                 /*@ I_SERVICES                */
/*
   Use PDSCOPYD to copy << mbr >> from << fromds >> to << tods >>
.  ----------------------------------------------------------------- */
IT_TSO_VERBS:                          /*@                           */
   if branch then call BRANCH
   address TSO

   if Left(fromds,1) = "'" then,
      fromdsuq = Strip(fromds,,"'")    /* strip quotes               */
   else,
      fromdsuq = Userid()"."fromds     /* add user                   */

   logpref = "("Branch( "ID" )")"
   call ZL_LOGMSG( logpref,
        "PDSCOPYD FROMDS" fromds "FROMMBR" mbr "TODS" tods )
   "PDSCOPYD FROMDS" fromds "FROMMBR" mbr "TODS" tods
      mig_ct   = mig_ct + 1
      zerrlm   = zerrlm "Member" fromds"("mbr") was copied to",
                          tods"; "

return                                 /*@ IT_TSO_VERBS              */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   v255.0    = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM( V B ) LRECL( 255 ) BLKSIZE( 0 )"
   v255.1    = "MOD"

   "ALLOC FI(@LOG) DA("logdsn") REU" v255.tempstat
   "EXECIO" log# "DISKW @LOG (STEM LOG. FINIS"
   "FREE  FI(@LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (tk_globalvars)  log. log#  msglim
   rc = Trace("O")
   address TSO

   parse arg msgtext

   /* for making the msgline always reasonably short:                */
   do while Length(msgtext) > msglim
      pt    = LastPos(" ",msgtext,msglim)
      slug  = Left(msgtext,pt)
      if monitor then say,
         slug
      parse value  log#+1  slug        with,
                   zz      log.zz    1  log#   .
      msgtext = "       "Substr(msgtext,pt)
   end                                 /* while msglim               */

   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg; say ""
ex_nam = Left(exec_name,8)             /* predictable size           */
say "  "ex_nam"      migrates members from a source dataset to a holding       "
say "                dataset.                                                  "
say "                                                                          "
say "  Syntax:   "ex_nam"  mbrlist                                             "
say "                      FROM fromds                                         "
say "                      TO   tods                                           "
say "                      NOLOG                                               "
say "                                                                          "
say "            mbrlist   names the members to be migrated from fromds to     "
say "                      tods.    If mbrlist is empty, an ISPF dialog is     "
say "                      started to collect that information.                "
say "                                                                          "
say "            fromds    names the source dataset containing the members to  "
say "                      be migrated.  If fromds is omitted, @MIGFDS in the  "
say "                      PROFILE pool is substituted, else @MIGFDS is        "
say "                      reloaded with fromds.                               "
say "                                                                          "
say "            tods      names the target dataset to receive the migrated    "
say "                      members.  If tods is omitted, @MIGTDS in the        "
say "                      PROFILE pool is substituted, else @MIGTDS is        "
say "                      reloaded with tods.                                 "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "                                                                          "
say "            NOLOG     (switch in parms) suppresses production of the log  "
say "                      file.  If omitted, the log file is produced.        "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR:  displays key information throughout processing.         "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "
if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
   Parse out the embedded components at the back of the source code.

   The components are enclosed in a comment whose start and end are on
   individual lines for easier recognition.

   Each component is identified by a triple-close-paren ")))" in
   column 1 followed by a DDName and a membername.  The text of the
   component begins on the next line.

   There are no restrictions on the DDName, but ISPF assets are treated
   differently than non-ISPF material.  Items to be LIBDEFd should be
   held to 4 character DDNs to accomodate the 'ISP' that will be
   prepended.  Code is supplied below to properly LIBDEF ISPF elements.
   Non-ISPF elements are not LIBDEFd but EXECIOd to a PO/80 dataset
   named for the DDN specified.
.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   (tk_globalvars)  ddnlist  @ddn.  daid.

   address TSO

   fb80po.0  = "NEW REU UNIT(SYSDA) SPACE(1 5) TRACKS DIR(40)",
                   "RECFM(F B) LRECL(80) BLKSIZE(0)"
   fb80po.1  = "SHR REU"
   parse value ""   with  ddnlist @ddn.  daid.

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   address ISPEXEC
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         if length(ddn) > 4 then do    /* data, not ISPF             */
            call DESPOOL               /*                           -*/
            currln = currln - 1        /* previous line              */
            iterate
            end
         if Pos(ddn,ddnlist) = 0 then do  /* doesn't exist           */
            ddnlist = ddnlist ddn      /* keep track                 */
            @ddn = ddn || Random(999)  /* PLIB322 maybe              */
            @ddn.ddn = @ddn            /* @ddn.PLIB = PLIB322        */
            address TSO "ALLOC FI("@ddn")" fb80po.0
            "LMINIT DATAID(DAID) DDNAME("@ddn")"
            daid.ddn = daid
            end
         daid = daid.ddn
         "LMOPEN DATAID("daid") OPTION(OUTPUT)"
         do queued()
            parse pull line
            "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
         end
         "LMMADD DATAID("daid") MEMBER("mbr")"
         "LMCLOSE DATAID("daid")"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   address TSO "DELSTACK"
   return
/*
   Subroutine of DEIMBED for non-ISPF data.
   Given: the stack, ddn, and mbr
.  ----------------------------------------------------------------- */
DESPOOL:                               /*@                           */
   if branch then call BRANCH
   address TSO

   if Sysdsn(ddn".DATA") <> "OK" then,
      "ALLOC FI("ddn") DA("ddn".DATA)" fb80po.0
   "ALLOC FI("ddn") DA("ddn".DATA("mbr")) SHR REU"
   "EXECIO" queued() "DISKW" ddn "(FINIS"
   "DELSTACK"
   "NEWSTACK"                          /* re-establish               */

return                                 /*@ DESPOOL                   */

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*
))) PLIB     FROMTO    ..
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( LOW  ) CAPS( ON  )
  @ TYPE( TEXT   ) INTENS( HIGH ) COLOR( YELLOW )
  ! TYPE( INPUT  ) INTENS( NON  )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
@|-|% Origin and Target @|-|
%COMMAND ===>_ZCMD
                                                             %SCROLL ===>_ZAMT+
+
     Enter the%dataset names+of the%origin+and%target+of the migration (in TSO
     format - quoted if fully-qualified) and the%membername+to be processed.
+
% Source Dataset Name ===>_fromds
+
%       Source Member ===>_mbr     +
+
+
% Target Dataset Name ===>_tods
+
)INIT
   .HELP  = FROMTOH
)PROC
)END
))) PLIB     FROMTOH   ..
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
  } AREA( SCRL   )         EXTEND( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%TUTORIAL |-| Origin and Target |-| TUTORIAL
%Next Selection ===>_ZCMD
                                                                               +
}hlptxt                                                                        }
)AREA HLPTXT
+
+     To migrate a member, specify the source dataset in TSO-format (quoted if
+     fully-qualified) and the member to be migrated.
+
+     Then specify the target dataset (also in TSO-format) to receive the
+     migrated member.
+
+     Press ENTER.
+
+     DIRSTATS will be called to acquire the current stats for the specified
+     member in the source dataset.
+
+     The TIME specification will be altered by UPDSTAT to have zero-seconds
+     indicating that this member has been selected for migration.
+
+     PDSCOPYD will then be called to copy the member from the source dataset
+     to the target dataset.
+
)PROC
   &ZUP   = FROMTOH
   &ZCONT = FROMTOH
)END
*/
